Mysql的日志文件：

binlog 二进制日志
binlog是记录所有的数据库表结构变更(create, alter)，以及表数据的修改(insert,update,delete)的二进制日志
二进制日志包含两类：
1) 二进制的索引文件 --- 记录所有的二进制文件
2) 二进制日志文件   --- 记录所有的非查询语句事件(非 select)


事务日志：
innodb事务的日志文件包括： redo log 和 undo log

undo log 指事务开始之前，操作任何数据之前，先将数据备份到一个地方 buffer

redo log 指事务中操作任何事物，将最新的事务备份到一个地方 buffer

redo log 并不是随着事务的提交才写入的，而是在事物写入的过程中，别开始写入redolog中，
若是发生故障的时候，有脏页未写入磁盘，重启mysql就可以根据mysql进行重做。从而达到事务可以持久化
redo log是为了实现事务的持久性而出现的产物。

undo log用来回滚事务记录到某个版本，事务未提交前，undo log保存了未提交之前的所有版本的数据。
若是发生回滚的话，可以回滚到之前对应的版本。 是为了实现 事务的原子性，在mysql存储引擎中为了实现 多版本的并发控制。


innodb引擎：
创建表后生成的文件：
 frm 创建表的语句; ibd 表里面的数据 + 索引文件

 底层实现:

1). 主键和索引存储在同一个文件中。首先会以主键key建立索引B+树，B+树的叶子节点
存储着主键key对应的数据。(在建表的时候innodb会自动建立好主键的id索引树)
2). 当我们为表中的字段建立索引的时候，这个字段的B+树叶子节点中存储的是主键的key
[因为innodb需要节省存储空间，一个表有可能有很多个索引生成索引树，如果每一个表都存储的是整个数据的话，那么表的索引文件就会非常冗余，非常的大]



Myisam引擎：

创建表后生成的文件：
frm 创建表的语句 MYD MYI 数据文件 索引文件

底层实现：
在建表的时候以 主键key建立索引B+树，树的叶子结点存储的是数据对应的物理地址。
拿到物理地址之后 就可以找到myISam文件中直接定位到具体的数据记录(在数据文件中)。



数据库的主从复制原理：

用途：
1. 灾备
2. 读写分离
3. 数据备份

必要条件：
1. 主库开启binlog日志
2. 主从server-id不同
3. 从库服务器能连通主库

原理：

从库生成两个线程， 一个IO线程， 一个SQL线程

IO线程去请求主库的bin log日志，将bin log写入relay log（中继日志）文件中
主库会生成一个log dump线程，用来给从库 IO线程 传输 bin log日志，将bin

SQL 线程，会读取relay log文件中的日志，并解析成具体操作，来实现主从的操作一致，而最终数据一致；

B 树一个节点里存的是数据，而 B+树存储的是索引（地址）
1、B+树的层级更少：相较于B树B+每个非叶子节点存储的关键字数更多(数据索引 + 指针)，树的层级更少所以查询数据更快；2、B+树查询速度更稳定：B+所有关键字数据地址都存在叶子节点上，所以每次查找的次数都相同所以查询速度要比B树更稳定;3、B+树天然具备排序功能：B+树所有的叶子节点数据构成了一个有序链表，在查询大小区间的数据时候更方便，数据紧密性很高，缓存的命中率也会比B树高。4、B+树全节点遍历更快：B+树遍历整棵树只需要遍历所有的叶子节点即可，，而不需要像B树一样需要对每一层进行遍历，这有利于数据库做全表扫描。B树相对于B+树的优点是，如果经常访问的数据离根节点很近，而B树的非叶子节点本身存有关键字其数据的地址，所以这种数据检索的时候会要比B+树快。




